{% extends 'base.twig' %}

{% block content %}
<section id="searchBlock" data-mode="{{ mode }}">
    <header class="row">
        <div class="medium-12 columns">
            <h2 class="text-center ">Recherche d'une partie</h2>
        </div>
    </header>
    <main>
        <section class="row">
            <div id="winSplash" class="hidden medium-5 columns callout">
                <h3 class="text-center">Victoire !</h3>
            </div>
            <div id="drawSplash" class="hidden medium-5 columns callout">
                <h3 class="text-center">&Eacute;galité !</h3>
            </div>
            <div id="looseSplash" class="hidden medium-5 columns callout">
                <h3 class="text-center">Défaite !</h3>
            </div>
        </section>

        <section class="row">
            <div id="searchgameBlock" class="hidden medium-5 columns">
                <a id="searchgame" class="btn">Rechercher une partie</a>
            </div>

            <div id="searchgameleaveBlock" class="medium-5 columns">
                <a id="searchgameleave" class="btn">Quitter la recherche de partie</a>
            </div>
        </section>
    </main>
</section>

<section id="boardBlock" class="hidden">
    <div id="screen" class="medium-6 columns">
        <div id="boards">
        </div>
    </div>
    <div id="boardsMessage" class="medium-6 columns">
        {% include 'chat/chat.inc.twig' %}
    </div>
</section>
{% endblock %}

{% block javascript %}
<script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
<script>
    var socket = io();

    let mode = searchBlock.dataset.mode;

    Interactive.searchGame(mode);

    searchgame.addEventListener('click', function(e){


        Interactive.searchGame(mode);

        window.addEventListener('beforeunload', Interactive.beforeleavePage);
        window.addEventListener('unload', Interactive.leavePage);

    });
    searchgameleave.addEventListener('click', function(e){

        Interactive.searchGameLeave(e);

        window.removeEventListener('beforeunload', Interactive.beforeleavePage);
        window.removeEventListener('unload', Interactive.leavePage);
    });

    socket.on('game find', function(msg){

        searchBlock.classList.add('hidden');
        boardBlock.classList.remove('hidden');

        Game.init({{ mode }});

        Online.online = true;

        Game.addPlayer('boussad');
        Game.addPlayer('gabriel');
    });

    socket.on('game action', function(action){
        action = JSON.parse(action);

        if(action.action == 'ChangeCaseValue') {

            Game.getBoard().setCasePlayer(null, action);
            Game.alternatePlayer();

        }
        else if(action.action == 'pushMessage'){

            pushMessage(action);

        }
        else if(action.action == 'leaveGame'){


            pushMessage(action);
            Game.clear(false, action);
            Online.online = false;

            window.removeEventListener('beforeunload', Interactive.beforeleavePage);
            window.removeEventListener('unload', Interactive.leavePage);

        }

    });

    var socket = io();
    chat('game');

    window.addEventListener('beforeunload', Interactive.beforeleavePage);
    window.addEventListener('unload', () => {
        if(Online.online){
            Interactive.leavePage();
            Online.online = false;
        }
        else{
            Interactive.searchGameLeave();
        }
    });

</script>
{% endblock %}
